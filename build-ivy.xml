<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="getdown" default="compile" basedir=".">
  <property name="app.name" value="getdown"/>
  <property name="revision" value="1.0"/>

  <!-- downloads ivy if necessary and sets everything up -->
  <property name="ivy.vers" value="2.1.0-rc2" />
  <property name="ivy.jar.dir" value="${user.home}/.ant/lib" />
  <condition property="ivy.exists"><available file="${ivy.jar.dir}/ivy.jar"/></condition>
  <target name="-download-ivy" unless="ivy.exists">
    <mkdir dir="${ivy.jar.dir}"/>
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.vers}/ivy-${ivy.vers}.jar" 
         dest="${ivy.jar.dir}/ivy.jar" usetimestamp="true"/>
  </target>
  <target name="-init-ivy" depends="-download-ivy">
    <path id="ivy.lib.path"><fileset dir="${ivy.jar.dir}" includes="*.jar"/></path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    <ivy:cachepath pathid="compile.classpath" conf="compile" log="download-only"/>
  </target>

  <target name="check-ivy" depends="-init-ivy" description="Computes and prints Ivy classpath.">
    <pathconvert pathsep="${line.separator}  " property="compile.str" refid="compile.classpath"/>
    <echo>Compile classpath:</echo>
    <echo>  ${compile.str}</echo>
  </target>

  <target name="proguard" depends="-init-ivy">
    <!-- we need ant-contrib for if -->
<!--
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${deploy.dir}/lib/ant-contrib.jar"/>
      </classpath>
    </taskdef>
-->

    <!-- figure out where the Java rt.jar file lives -->
<!--
    <if><and><os family="mac"/><os family="unix"/></and><then>
      <property name="rtClasses" value="${java.home}/../Classes/classes.jar"/>
    </then><else>
      <property name="rtClasses" value="${java.home}/lib/rt.jar"/>
    </else></if>
-->

    <mkdir dir="target"/>

    <taskdef resource="proguard/ant/task.properties" classpathref="compile.classpath"/>
    <proguard>
-injars dist/getdown.jar(!**/tools/**)
-injars dist/getdown.jar(**/tools/*Patcher*,**/tools/Differ*)
-injars dist/lib/jRegistryKey.jar(!META-INF/*)
-injars dist/lib/samskivert.jar(
  com/samskivert/Log.class,**/io/**,**/swing/**,**/net/**,**/text/**,**/util/**)
-injars dist/lib/commons-codec.jar(!META-INF/*)

-dontskipnonpubliclibraryclasses

-outjars target/getdown-pro.jar

-keep public class ca.beq.util.win32.registry.** {
    *;
}

-keep public class com.threerings.getdown.launcher.Getdown {
    public static void main (java.lang.String[]);
}

-keep public class com.threerings.getdown.launcher.GetdownApp {
    public static void main (java.lang.String[]);
}

-keep public class com.threerings.getdown.launcher.GetdownApplet {
    *;
}

-keep class * extends javax.swing.JApplet {
    &lt;methods&gt;;
}

-keep public class com.threerings.getdown.launcher.GetdownAppletConfig {
    *;
}
    </proguard>

<!--
    <taskdef name="weave" classname="com.rc.retroweaver.ant.RetroWeaverTask"
             classpath="${deploy.dir}/lib/retroweaver-all-1.2.2.jar"/>
    <weave inputjar="${basedir}/${deploy.dir}/${app.name}-pro.jar"
           outputjar="${basedir}/${deploy.dir}/${app.name}-retro-pro.jar"/>
-->
    <!-- now combine the retroweaved jar file with the retroweaver runtime -->
<!--
    <unjar src="${deploy.dir}/lib/retroweaver-rt-1.2.2.jar"
           dest="${deploy.dir}/rptmp"/>
    <jar destfile="${deploy.dir}/${app.name}-retro-pro.jar"
         manifest="lib/manifest.mf" basedir="${deploy.dir}/rptmp" update="true"/>
    <delete dir="${deploy.dir}/rptmp"/>
-->
  </target>
</project>
